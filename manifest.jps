type: update
version: 1.4

id: openvpn-as
name: OpenVPN Access Server
baseUrl: https://raw.githubusercontent.com/d-kay23/openvpn-as/openvpn-lets-encrypt
logo: images/logo.png

homepage: https://www.openvpn.net/
description:
  short: Full featured secure network tunneling VPN
  text: |
    OpenVPN Access Server is a full featured secure network tunneling VPN software solution that integrates OpenVPN server
    capabilities, enterprise management capabilities, simplified OpenVPN Connect UI, and OpenVPN Client software packages that
    accommodate Windows, MAC, and Linux OS environments. OpenVPN Access Server supports a wide range of configurations,
    including secure and granular remote access to internal network and/or private cloud network resources and applications with
    fine-grained access control.
    <div class='warning-lower' style='color:#b7c3da'>
    <b>Note</b> that the Public IP and Firewall will be activated for your environment automatically.
    </div>

targetNodes:
  nodeType: [
    'tomcat6', 'tomcat7', 'tomcat8', 'tomcat85', 'tomcat9', 'tomcat', 
    'tomee', 'tomee-dockerized',
    'glassfish3', 'glassfish4', 'glassfish',
    'jetty6', 'jetty8', 'jetty9',
    'apache', 'apache2',
    'nginxphp', 'nginxphp-dockerized',
    'apache2-ruby', 'nginx-ruby',
    'nginx', 'nginx-dockerized', 
    'haproxy',
    'apache-lb',
    'varnish', 'varnish-dockerized',
    'payara',
    'golang',
    'nodejs',
    'wildfly',
    'springboot',
    'storage',
    'cassandra2', 'cassandra3',
    'couchbase',
    'couchdb',
    'mongodb', 'mongodb2',
    'redis', 'redis3', 'redis4',
    'mariadb', 'mariadb10', 'mariadb-dockerized',
    'mysql', 'mysql5', 'mysql5-6',
    'postgresql', 'postgres', 'postgres9',
    'maven', 'maven3',
    'memcached', 'memcached-dockerized',
    'centos6', 'centos7' ]
    
globals:
  nodeId: ${targetNodes.master.id}
  username: openvpn
  password: ${fn.password(10)}
  workDir: /usr/local/openvpn_as
  iptablesCustom: /etc/sysconfig/iptables-custom
  ovpn: ${globals.workDir}/scripts
  ovpnPortUDP: 1194
  ovpnPortTCP: 443
  webUiPort: 943
  letsEncryptBaseUrl: https://raw.githubusercontent.com/SlavaKatiukha/lets-encrypt/le-custom
  letsEncryptBaseDir: ${globals.workDir}/letsencrypt/
  letsEncryptDeployHook: ${globals.letsEncryptBaseDir}root/onDeploy.sh
  letsEncryptUndeployHook: ${globals.letsEncryptBaseDir}root/onUndeploy.sh
  letsEncryptScriptSufix: ovpn-letsencrypt-ssl

settings:
  fields:
    - type: radio-fieldset
      name: sslCertType
      default: self-signed
      values:
        self-signed: Use self-signed SSL certificate
        lets-encrypt: Use Let's Encrypt Free SSL with auto-renewal
      showIf:
        lets-encrypt:
          - type: string
            name: customDomains
            regex: "^\\s*(([a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]?(\\.[a-zA-Z0-9-]{2,6})+)+\\s*[,|;]?\\s*)*([a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9-]?(\\.[a-zA-Z0-9-]{2,6})+)$"
            caption: External Domain(s)
            placeholder: Leave blank to get a dummy SSL for internal domain
            required: false

buttons:
  caption: Configure SSL
  settings: main
  action: configureSsl

onInstall:
  - setExtIpEnabled [${globals.nodeId}]: true
  - installVPN
  - if ("${settings.sslCertType}" == "lets-encrypt"):
      installLetsEncrypt:
        customDomains: ${settings.customDomains}
  - setupFirewallAndShowSuccess

onUninstall:
  - callSslScript:
      action: uninstall
  - cleanIptablesCustom
  - cmd [${globals.nodeId}]: |-
      rpm -e openvpn-as
      rm -rf ${globals.workDir}      
      /usr/bin/jem firewall fwstart
      sed -i '/.*# create TUN device/d' /etc/rc.d/rc.local
      for i in $(iptables -S | grep AS0_ | awk '{print $2}' | uniq); do iptables -F $i && iptables -Z $i && iptables -X $i; done
    user: root

actions:
  installVPN:
    - checkTunDevice
    - cmd [${globals.nodeId}]: |-
        yum update iptables -y
        rpm -q --queryformat '%{VERSION}' centos-release | rpm -i http://swupdate.openvpn.org/as/openvpn-as-2.5-CentOS$(cat).x86_64.rpm        
        ${globals.ovpn}/confdba --mod --key=iptables.vpn.disable.filter --value=True --prof=Default
        ${globals.ovpn}/confdba --mod --key=iptables.vpn.disable.nat --value=True --prof=Default
        ${globals.ovpn}/confdba --mod --key=iptables.vpn.disable.mangle --value=True --prof=Default
        echo -e '${globals.password}' | sudo passwd --stdin '${globals.username}' && ${globals.ovpn}/confdba -mk - 'vpn.server.daemon.tcp.n_daemons' -v '1'
        ${globals.ovpn}/sacli --user '${globals.username}' --key "prop_autologin" --value "true" UserPropPut
        ${globals.ovpn}/sacli --restart_mode=dry_run Start
      user: root

  checkTunDevice:
    cmd [${globals.nodeId}]: |-
      modprobe tun;
      createTunDev='[ ! -f /dev/net/tun ] && mkdir -p /dev/net && mknod /dev/net/tun c 10 200 && chmod 0666 /dev/net/tun';
      eval $createTunDev && echo "$createTunDev # create TUN device" >> /etc/rc.d/rc.local;
      exit 0;
    user: root

  setupFirewall:
    - cleanIptablesCustom
    - cmd [${globals.nodeId}]:
        curl '${baseUrl}/scripts/iptables-custom' |
        sed 's/{{PUBLIC_IP}}/${this.ip}/g;
             s/{{OVPN_UDP_PORT}}/${globals.ovpnPortUDP}/g;
             s/{{OVPN_TCP_PORT}}/${globals.ovpnPortTCP}/g;
             s/{{OVPN_WEB_PORT}}/${globals.webUiPort}/g;' >> ${globals.iptablesCustom};
        sed -i s/FIREWALL_ENABLED=0/FIREWALL_ENABLED=1/g /etc/jelastic/metainf.conf;
        /usr/bin/jem firewall fwstart;
      user: root    
      
  cleanIptablesCustom:
    cmd [${globals.nodeId}]: |-
      [ -f ${globals.iptablesCustom} ] && sed -i '/# BOF OpenVPN/,/# EOF OpenVPN/d' ${globals.iptablesCustom}; exit 0      
    user: root

  installLetsEncrypt:
    - cmd [${globals.nodeId}]:
        mkdir -p $(dirname ${globals.letsEncryptDeployHook});
        printf '#!/bin/bash\n
               ${globals.ovpn}/sacli --key "cs.priv_key"  --value_file "${globals.letsEncryptBaseDir}var/lib/jelastic/keys/privkey.pem" ConfigPut\n
               ${globals.ovpn}/sacli --key "cs.cert"      --value_file "${globals.letsEncryptBaseDir}var/lib/jelastic/keys/cert.pem" ConfigPut\n
               ${globals.ovpn}/sacli --key "cs.ca_bundle" --value_file "${globals.letsEncryptBaseDir}var/lib/jelastic/keys/fullchain.pem" ConfigPut\n
               ${globals.ovpn}/sacli --restart_mode=dry_run start' > ${globals.letsEncryptDeployHook};
        mkdir -p $(dirname ${globals.letsEncryptUndeployHook});
        printf '#!/bin/bash\n
               ${globals.ovpn}/sacli --key "cs.priv_key" ConfigDel\n
               ${globals.ovpn}/sacli --key "cs.ca_bundle" ConfigDel\n
               ${globals.ovpn}/sacli --key "cs.cert" ConfigDel\n
               ${globals.ovpn}/sacli --restart_mode=dry_run start' > ${globals.letsEncryptUndeployHook};
      user: root
    - script: |
        var customDomains = "${this.customDomains}",
            domain = customDomains || "${targetNodes.master.url}".replace(/^https?:\/\/(.*)\/?$/, "$1");

        return {
          result: 0,
          onAfterReturn: {
            script: "${globals.letsEncryptBaseUrl}/scripts/create-installation-script.js?_r=${fn.random}",
            cronTime: "0 ${fn.random(1,6)} * * *",
            baseUrl: "${globals.letsEncryptBaseUrl}",
            baseDir: "${globals.letsEncryptBaseDir}",
            customDomains: domain,
            scriptName: "${env.envName}-${globals.letsEncryptScriptSufix}",
            nodeId: "${globals.nodeId}",
            deployHook: "${globals.letsEncryptDeployHook}",
            undeployHook: "${globals.letsEncryptDeployHook}",
            test: !customDomains
          }
        };

  callSslScript:
    script: |
      var resp = jelastic.dev.scripting.Eval(appid, session, '${env.envName}-${globals.letsEncryptScriptSufix}', {action:'${this.action}'});
      if (resp.result == 0 && typeof resp.response === 'object' && resp.response.result != 0) resp = resp.response;
      return resp;

  configureSsl:
    - if ("${this.sslCertType}" == "lets-encrypt"):
        installLetsEncrypt:
          customDomains: ${this.customDomains}
    - if ("${this.sslCertType}" == "self-signed"):
        callSslScript:
          action: uninstall

  setupFirewallAndShowSuccess:
    script [${globals.nodeId}]: |
      var resp = jelastic.env.control.GetEnvInfo("${env.envName}", session);
      if (resp.result !== 0) return resp;
      var nodes = resp.nodes;

      var publicIP;
      for (i = nodes.length; i--;) {
        if (nodes[i].id == nodeId) {
          publicIP = nodes[i].extIPs[0];
          break;
        }
      }

      success = success.replace(/{{URI}}/g, "${targetNodes.master.url}:${globals.webUiPort}".replace(/^https?/, "https"));

      return {
        result: 0,
        onAfterReturn: [
          { "setupFirewall" : { "ip" : publicIP } },
          { "return" : { "type": "success", "message": success, "email": success } }
        ]
      };
    success: |
      #### Admin UI is available here: [{{URI}}/admin]({{URI}}/admin)

      Enter the access credentials below to connect:
      * Username: **${globals.username}**
      * Password: **${globals.password}**

      Connection profiles can be downloaded using [Client UI]({{URI}}).

      #### To download the OpenVPN Connect app, please choose a platform below:
      * [OpenVPN Connect for Windows]({{URI}}/generic/openvpn-connect-2.5.0.100.msi)
      * [OpenVPN Connect for Mac OS X]({{URI}}/generic/openvpn-connect-2.5.0.112_signed.dmg)
      * [OpenVPN Connect for Android](http://openvpn.net/clients/index.php?client=openvpn_connect_android)
      * [OpenVPN Connect for iOS](http://openvpn.net/clients/index.php?client=openvpn_connect_ios)
      * [OpenVPN for Linux](http://openvpn.net/clients/index.php?client=openvpn_linux)
